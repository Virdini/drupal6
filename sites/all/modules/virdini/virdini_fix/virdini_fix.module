<?php

/**
* Implements of hook_nodeapi().
*/
function virdini_fix_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'prepare translation':
        $node->teaser = $node->translation_source->teaser;
      break;
  }
}

/**
 * Implements of hook_form_alter().
 */
function virdini_fix_form_alter(&$form, $form_state, $form_id) {
  global $user;
  if ($form_id == 'user_profile_form') {
    if ($form['_account']['#value']->uid == 1 && $user->uid != 1) {
      $form['#access'] = FALSE;
      $form = array('form' => $form);
      $form['access']['#value'] = t('Access denied');
    }
    if ($form['_account']['#value']->uid == 1 && isset($form['delete'])) {
      unset($form['delete']);
    }
  }
  if ($form_id == 'user_confirm_delete' && $form['_account']['#value']->uid == 1) {
    $form['#access'] = FALSE;
    $form = array('form' => $form);
    $form['access']['#value'] = t('Access denied');
  }
  if ($form_id == 'user_multiple_delete_confirm') {
    if (isset($form['accounts'][1]) && $form['accounts'][1]['#value'] == 1) {
      unset($form['accounts'][1]);
    }
  }
  if ($form_id == 'user_admin_account' && isset($form['accounts']['#options'][1])) {
    unset($form['accounts']['#options'][1]);
  }
}

/**
 * Implements of hook_menu().
 */
function virdini_fix_menu() {
  $items = array();
  $items['403.html'] = array(
    'title' => 'Access denied',
    'page callback' => 'virdini_fix_error_page',
    'page arguments' => array('403'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['404.html'] = array(
    'title' => 'Page not found',
    'page callback' => 'virdini_fix_error_page',
    'page arguments' => array('404'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function virdini_fix_error_page($code = 404) {
  $output = '<div class="error-page-"'. $code .'>'. $code .'</div>';
  return $output;
}

/**
 * Implements of hook_preprocess_page().
 */
function virdini_fix_preprocess_page(&$vars){
  if (arg(0) == '403.html' || arg(0) == '404.html') {
    $vars['template_files'][] = 'error-page';
  }
}

/**
 * Fixed default mailengine.
 * From: in headers not properly encoded
 * https://www.drupal.org/node/1209018
 *
 * @param $op
 *   The operation to perform on the message.
 * @param $message
 *   The message to be sent.
 *
 * @return
 *   Returns TRUE if the operation was successful or FALSE if it was not.
 */
function virdini_fix_mailengine($op, $message = array()) {
  switch ($op) {
    case 'name':
      return t('Virdini Fix Mime Mail');

    case 'description':
      return t("Fixed default mailing engine - mimemail_mailengine");

    // Not implemented.
    case 'settings':
      return FALSE;

    case 'multiple':
    case 'single':
    case 'send':
      return mimemail_mailengine($op, $message);
  }

  return FALSE;
}

/**
 * Fixed default engine's prepare function.
 *
 * @param
 *   Same parameters as mimemail() except $send.
 *
 * @return
 *   The $message array structure containing all details of the message.
 */
function virdini_fix_prepare_message($sender, $recipient, $subject, $body, $plaintext = NULL, $headers = array(), $text = NULL, $attachments = array(), $mailkey = '') {
  module_load_include('inc', 'virdini_fix', 'virdini_fix.mimemail');
  return _virdini_fix_prepare_message($sender, $recipient, $subject, $body, $plaintext, $headers, $text, $attachments, $mailkey);
}
